name: Publish Extension

# Trunk: ignore unresolved action resolution for this workflow
# trunk-ignore(actionlint/ACTION_001)

on:
  workflow_dispatch:
    inputs:
      # trunk-ignore(checkov/CKV_GHA_7)
      dry_run:
        description: Perform a dry run (package and publish with --dry-run)
        required: false
        type: string
        default: "false"

permissions:
  contents: write

jobs:
  publish:
    env:
      DRY_RUN: ${{ github.event.inputs.dry_run }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Compile
        run: npm run compile

      - name: Run tests
        uses: GabrielBB/xvfb-action@v1
        with:
          run: npm test

      - name: Install vsce
        run: npm install -g @vscode/vsce

      - name: Update Version
        id: update_version
        run: |
          # Extract version from ref name (remove 'v' prefix if present)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          # Update package.json version
          npm version "$VERSION" --no-git-tag-version
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release with auto-generated notes
          gh release create "${{ github.ref_name }}" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${{ github.ref_name }}" \
              --generate-notes

          # Get the generated release notes
          NOTES=$(gh release view "${{ github.ref_name }}" --json body -q .body)
          echo "notes=$NOTES" >> $GITHUB_OUTPUT
          echo "Release notes generated:"
          echo "${NOTES}"

      - name: Package and Publish Extension
        env:
          NODE_OPTIONS: --no-deprecation # Suppress vsce deprecation warnings
        run: |
          # At runtime, ensure VSCE_PAT is exported by the runner or set via repository secrets;
          # avoid referencing secrets directly in the YAML mapping to prevent context validation errors.
          if [ -z "${VSCE_PAT:-}" ]; then
            echo "Warning: VSCE_PAT is not set in the environment; publishing may fail."
          fi

          # Check if dry run
          dry_run_flag=""
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "Dry run mode - running with dry run package and publish"
            dry_run_flag="--dry-run"
          fi          
          vsce package --message "${{ steps.create_release.outputs.notes }}" $dry_run_flag
          vsce publish --message "${{ steps.create_release.outputs.notes }}" $dry_run_flag

      - name: Commit Version Update
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update version to ${{ steps.update_version.outputs.version }}"
          file_pattern: package.json
          branch: ${{ github.ref_name }}
